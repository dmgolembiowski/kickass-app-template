[package]
name = "kickass-app-template"
version = "0.1.0"
edition = "2021"

[features]
default = [
                                 # we're using the default allocator for now, as it works better in low memory environments
    #"tcmalloc_allocator"        # the fastest allocator, according to features.rs (go measure it again, from time to time)
]

dox = ["ctor"]                      # allows test module setups functions

# Allocators
std_allocator              = []
mimalloc_allocator         = ["mimalloc"]
jemallocator_allocator     = ["jemallocator"]
tcmalloc_allocator         = ["tcmalloc/default"]       # fastest for multi-threaded algorithms, even if it uses a little bit more RAM (even on heavy swapping scenarios) -- requires libs provided by system package 'gperftools'
tcmalloc_allocator_bundled = ["tcmalloc/bundled"]       # this one uses tcmalloc's implementation of it's required lib

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[workspace]

[dependencies]


# KICKASS-APP-TEMPLATE DEPENDENCIES
###################################

# global allocators -- enabled by features -- see features.rs
jemallocator = { version = "0.3", optional = true }
mimalloc     = { version="0.1", optional = true }
tcmalloc     = { version="0.3", default-features = false, optional = true }
# other interesting allocators:
# scudo - focused on heap security (prevents heap exploitation by unsafe / external code)

log         = { version = "0.4", features = ["max_level_debug", "release_max_level_info"] }
parking_lot = "0.12"    # high performance Mutexes

# default config loading & saving
serde      = { version = "1.0", features = ["derive"] }      # typed serialization / deserialization
ron        = "0.7"                                           # .ron config files
regex      = "1.5"                                           # for placing docs along with config files
owning_ref = "0.4.1"                                         # allows Arcs to be used for internal references

# metrics
minstant       = "0.1"  # (real) time measurements through RDTSC instruction (without calling the Kernel / without causing a context switch)
# low overhead, ergonomical metrics gathering
metered           = { version = "0.8", features = [ "error-count-skip-cleared-by-default" ] }
hdrhistogram      = "7.5"   # low-latency, high-range histograms
#atomic           = "0.5"   # native atomic instructions for generic T: Copy types (or fallback, if atomic instr is not possible)
#serde_prometheus = "0.1"   # serde-based serializer for prometheus' text-based exposition format
#thiserror        = "1.0"   # macros for making enum variants to implement the Error trait -- for libs

# command-line parsing
structopt    = "0.3"                                            # command line parsing
strum        = { version = "0.24", features = ["derive"] }      # enums serialization/deserialization
strum_macros = "0.24"

# console UI
slog-stdlog = "4"   # Facade between slog and Rust's standard 'log' api
slog-scope  = "4"
slog        = "2"
sloggers    = "2"
#simple_logger = {version = "2.1", features = ["stderr"]}  # a dirty console logger

# terminal UI
tui       = { version = "0.18", features = ['crossterm'] }
crossterm = "0.23"  # from tui's Cargo.toml
rand      = "0.8"

# GUI
eframe      = { version = "0.18", features = ["persistence"] }   # Gives us egui, epi and web+native backends, allowing it to save & load the UI state between runs
egui_extras = { version = "0.18", features = ["svg"] }           # Additional widgets for egui: Images, Tables, ...
rlottie     = "0.4.0"                                            # Lottie animations -- depends on 'rlottie' package from AUR
rgb         = { version = "0.8.32", default-features = false }   # for rlottie pixel format conversions
chrono      = "0"

# telegram UI
teloxide = { version = "0.9", features = ["macros", "auto-send"] }
reqwest  = { version = "0.11", features = ["cookies", "gzip"] }

# web API / UI
rocket      = { version = "0.5.0-rc.2", features = ["json"] }
tokio       = { version = "1", features = ["full", "rt-multi-thread"] }
futures     = { version = "0.3" }
lazy_static = "1.4"    # used when serving embedded files

# doc dependencies
##################

ctor = { version = "0.1", optional = true }


[dev-dependencies]
ctor          = "0.1"    # setup and teardown for test modules
simple_logger = "2.1"    # a dirty console logger
httpmock      = "0"      # allows testing http client code
big-o-test    = "0.2"    # enforce algorithm's maximum allowed complexity


[build-dependencies]

# FRONTEND DEPENDENCY for Web Angular UI integration in build.rs
walkdir = "2.3"
flate2  = "1"      # gzip / gunzip
brotli  = "3.3"    # brotli compression
chrono  = "0"


# uncomment the bellow section to enable aggressive linking optimizations when compiling for release,
# impacting positively the executable size & performance, at the cost of increasing building time.
# optimizations gets at its peak when compiling with: RUSTFLAGS="-C target-cpu=native" cargo build --release
# see https://deterministic.space/high-performance-rust.html
[profile.release]
strip = "symbols" # can be "none", "debuginfo", "symbols" (also strips debug info)
debug-assertions = false
overflow-checks = false
lto = "fat"         # can be "fat", "thin", "off" (keep it off so PGO may work as of Rust 1.59 -- see https://github.com/rust-lang/rust/issues/90522)
codegen-units = 1
debug = false
panic = "abort"     # disables stack traces / stack unwiding -- can be "unwind", "abort"